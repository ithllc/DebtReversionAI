"""
Unified MCP Server for DebtReversionAI
This file is a backup copy of the original `src/main.py` before reorganizing tool logic
into `src/tools/`.

Original entrypoint that combined financial and EDGAR tool wrappers into a single MCP.
"""

import os
from pathlib import Path
from dotenv import load_dotenv
from mcp.server.fastmcp import FastMCP
from src.servers.financial_server import FinancialDataServer
from src.servers.edgar_server import EdgarServer

# Load environment variables from .env file
env_path = Path(__file__).parent.parent / '.env'
if env_path.exists():
    load_dotenv(env_path)
else:
    # Try loading from current directory as fallback
    load_dotenv()

# Check for SEC_API_USER_AGENT early
sec_identity = os.getenv("SEC_API_USER_AGENT")
if not sec_identity:
    raise ValueError("SEC_API_USER_AGENT environment variable is not set. Please set it to a valid email address.")

# Create FastMCP instance
mcp = FastMCP(
    name='DebtReversionAI',
    instructions="""This MCP server provides financial analysis tools for identifying mean reversion opportunities.

Available tools:
- get_stock_data(ticker, period): Get stock price data including 52-week high/low
- calculate_macd(ticker, timeframe): Calculate MACD indicator for daily/weekly timeframes  
- check_52week_low(ticker, tolerance): Check if stock is at or near 52-week low
- check_optionable(ticker): Verify if stock has options available
- search_debt_conversions(ticker, months_back): Search for debt conversion events in 8-K filings
- get_recent_filings(ticker, form_type, count): Get recent SEC filings for a company

This server combines financial market data (via yfinance) with SEC EDGAR filing analysis.""",
)

# Initialize sub-servers for data access
financial_server = FinancialDataServer(port=None)
edgar_server = EdgarServer(port=None)


@mcp.tool()
async def get_stock_data(ticker: str, period: str = "1y") -> str:
    result = await financial_server._get_stock_data(ticker, period)
    if isinstance(result, list) and len(result) > 0:
        return result[0].text
    return str(result)


@mcp.tool()
async def calculate_macd(ticker: str, timeframe: str) -> str:
    result = await financial_server._calculate_macd(ticker, timeframe)
    if isinstance(result, list) and len(result) > 0:
        return result[0].text
    return str(result)


@mcp.tool()
async def check_52week_low(ticker: str, tolerance: float = 0.05) -> str:
    result = await financial_server._check_52week_low(ticker, tolerance)
    if isinstance(result, list) and len(result) > 0:
        return result[0].text
    return str(result)


@mcp.tool()
async def check_optionable(ticker: str) -> str:
    result = await financial_server._check_optionable(ticker)
    if isinstance(result, list) and len(result) > 0:
        return result[0].text
    return str(result)


@mcp.tool()
async def search_debt_conversions(ticker: str, months_back: int = 3) -> str:
    result = await edgar_server._search_debt_conversions(ticker, months_back)
    if isinstance(result, list) and len(result) > 0:
        return result[0].text
    return str(result)


@mcp.tool()
async def get_recent_filings(ticker: str, form_type: str = "8-K", count: int = 10) -> str:
    result = await edgar_server._get_recent_filings(ticker, form_type, count)
    if isinstance(result, list) and len(result) > 0:
        return result[0].text
    return str(result)


def main():
    import argparse

    parser = argparse.ArgumentParser(description='DebtReversionAI MCP Server')
    parser.add_argument('--port', type=int, help='Port for HTTP transport')
    parser.add_argument('--host', type=str, default='0.0.0.0', help='Host for HTTP transport')
    parser.add_argument('--stdio', action='store_true', help='Force STDIO transport')
    parser.add_argument('--test', action='store_true', help='Test mode')
    args = parser.parse_args()

    if args.test:
        print('DebtReversionAI MCP Server loaded successfully')
        print('Tools available: get_stock_data, calculate_macd, check_52week_low, check_optionable, search_debt_conversions, get_recent_filings')
        return 0

    # Determine transport mode (stdio is default for Dedalus)
    if (args.port or os.environ.get('PORT')) and not args.stdio:
        print(f'Starting HTTP server on {args.host}:{args.port}')
        mcp.run(transport='streamable-http')
    else:
        # STDIO transport (default for MCP/Dedalus)
        print('Starting unified DebtReversionAI MCP server via stdio transport...')
        print('Available tools: get_stock_data, calculate_macd, check_52week_low, check_optionable, search_debt_conversions, get_recent_filings')
        mcp.run('stdio')
    return 0


if __name__ == '__main__':
    import sys
    sys.exit(main())
"""
Backup of original main.py before reorganizing tools into src/tools/
"""

# Original file backed up by automated refactor
